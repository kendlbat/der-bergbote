---
import AppSkeleton from "@/components/astro/AppSkeleton.astro";
import BergBalance from "@/components/astro/BergBalance.astro";
import UserRendererByUser from "@/components/astro/UserRendererByUser.astro";
import { db } from "@/db";
import { balance } from "@/db/schema";
import Layout from "@/layouts/Layout.astro";
import { getSession } from "auth-astro/server";
import { count } from "console";
import { sql, desc } from "drizzle-orm";

const topBalances = await db
    .select()
    .from(balance)
    .orderBy(desc(balance.amount))
    .limit(10);

const session = await getSession(Astro.request);
const user = session!!.user!!.email;

const myBalance = (
    await db
        .select()
        .from(balance)
        .where(sql`${balance.user} = ${user}`)
        .limit(1)
)[0] || {
    name: session!!.user!!.name,
    user: session!!.user!!.email,
    amount: 0,
};

const myPos =
    (
        await db
            .select({
                position: sql`COUNT(*) + 1`,
            })
            .from(balance)
            .where(sql`${balance.amount} > ${myBalance.amount}`)
    )[0]?.position || 0;
---

<Layout title="Bergbote - Leaderboard">
    <AppSkeleton>
        <div class="flex flex-col p-4 text-[0.8em] md:text-[1em]">
            {
                topBalances.map(({ name, amount, user }, idx) => (
                    <span>
                        <div
                            class={
                                "grid grid-cols-12 gap-8 align-baseline md:mx-5 md:px-5 px-3 rounded-lg" +
                                (user == myBalance.user ? " bg-secondary" : "")
                            }
                        >
                            <span class="self-center h-min text-[1.8em]">
                                {topBalances.findIndex(
                                    (b) => b.amount == amount
                                ) +
                                    1 +
                                    "."}
                            </span>
                            <div class="hidden place-self-center sm:inline-block w-[6em] h-[4em] [&>*]:w-[100%!important] justify-around justify-items-center sm:col-span-1">
                                <UserRendererByUser user={user} />
                            </div>
                            <span class="h-min self-center text-[1.8em] col-span-6 leading-5">
                                {name}
                            </span>
                            <span class="col-span-2" />
                            <span class="flex flex-row-reverse col-span-2 text-[0.75em]">
                                <BergBalance
                                    class="h-min self-center"
                                    amount={amount}
                                />
                            </span>
                        </div>
                        <span class="border-t mx-8 block" />
                    </span>
                ))
            }

            <div
                class="flex justify-center gap-4 sm:text-[1em] text-[0.9em] md:gap-8 align-baseline mt-4"
            >
                <span class="h-min self-center text-[2em]">
                    {myPos + "."}
                </span>
                <span class="h-min self-center text-[2em] leading-6">
                    {myBalance.name}
                </span>
                <BergBalance
                    class="h-min self-center text-[0.75em]"
                    amount={myBalance.amount}
                />
            </div>
        </div>
    </AppSkeleton>
</Layout>
