---
import AppSkeleton from "@/components/astro/AppSkeleton.astro";
import { InventoryUI } from "@/components/astro/inventory/InventoryUI";
import { SignOut } from "@/components/react/auth/auth-buttons";
import { db } from "@/db";
import { inventory, equipped } from "@/db/schema";
import Layout from "@/layouts/Layout.astro";
import { getImage } from "astro:assets";
import { getSession } from "auth-astro/server";
import { sql } from "drizzle-orm";
import { items } from "@/gambling/items";
import type { GetImageResult } from "astro";
import empty from "@/assets/items/empty.png";
import coinImage from "@/assets/coin.gif";

const images = import.meta.glob<{ default: ImageMetadata }>(
    "/src/assets/items/**.png"
);
const types = import.meta.glob<{ default: ImageMetadata }>(
    "/src/assets/itemTypes/*.png"
);

const session = await getSession(Astro.request);
const user = session?.user?.email!!;

if (!user)
    return new Response(null, {
        headers: {
            location: "/",
        },
        status: 302,
    });

const typeImages: Record<string, GetImageResult> = Object.fromEntries(
    await Promise.all(
        Object.entries(types).map(async ([k, v]) => [
            k.replace("/src/assets/itemTypes/", ""),
            await getImage({
                src: (await v()).default,
            }),
        ])
    )
);

const userItems = await Promise.all(
    (
        await db
            .select()
            .from(inventory)
            .where(sql`${user} = ${inventory.user}`)
    ).map(async (i) => {
        const img =
            images[
                `/src/assets/items/${items[i.item!!].type.toString()}/${items[i.item!!].resourceName}_item.png`
            ] || images[`/src/assets/items/${items[i.item!!].type.toString()}/${items[i.item!!].resourceName}.png`]

        return {
            ...i,
            image: await getImage({
                src: (await img()).default,
            }),
            typeIcon: typeImages[`${items[i.item!!].type}.png`],
        };
    })
);

const userEquipped = await db
    .select()
    .from(equipped)
    .where(sql`${equipped.user} = ${user}`);
---

<Layout title="Bergbote - My Profile">
    <AppSkeleton>
        <div class="p-2">
            <InventoryUI
                client:load
                coin={coinImage}
                items={userItems}
                typeImages={typeImages}
                equipped={userEquipped}
            />
            <div class="pt-2">
                <SignOut client:visible />
            </div>
        </div>
    </AppSkeleton>
</Layout>
