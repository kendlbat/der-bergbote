---
import AppSkeleton from "@/components/astro/AppSkeleton.astro";
import Layout from "@/layouts/Layout.astro";
import { db } from "@/db";
import { topicsTable } from "@/db/schema";
import { getImage, Image, Picture } from "astro:assets";
import bookImage from "@/assets/books/red.png";

const bi = await getImage({
    src: bookImage,
    format: "webp",
});

const topics = await db
    .select({
        id: topicsTable.id,
        name: topicsTable.name,
    })
    .from(topicsTable);
---

<Layout title="Bergbote - Articles">
    <AppSkeleton>
        <script is:inline>
            function pictureOnError() {
                this.onerror = null;
                this.parentNode.children[0].srcset =
                    this.parentNode.children[1].srcset = this.src;
            }
        </script>
        <div
            class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-3 p-2"
        >
            {
                topics.map((t) => (
                    <a
                        data-astro-prefetch
                        href={`/library/topics/${t.id}`}
                        class="border rounded-lg h-full flex flex-col"
                    >
                        <div class="flex-grow">
                            <picture class="rounded-t-lg w-full h-full">
                                <source
                                    srcset={"/api/topics/" + t.id + "/image"}
                                    type="image/png"
                                />
                                <img
                                    src={bi.src}
                                    srcset={bi.src}
                                    alt={t.name}
                                    class="w-full h-full rounded-t-lg"
                                    onerror="pictureOnError.call(this)"
                                />
                            </picture>
                        </div>
                        <p class="p-3 pt-2 leading-6 sm:leading-4 text-[2em] sm:text-lg sm:h-16">
                            {(t.name?.length || 0) > 70 ?
                                t.name?.slice(0, 70) + "..."
                            :   t.name}
                        </p>
                    </a>
                ))
            }
        </div>
    </AppSkeleton>
</Layout>
