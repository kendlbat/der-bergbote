---
import { Image } from "astro:assets";
import { items } from "@/gambling/items";
import { EquippableType, Rarity } from "@/gambling/enums";
import BergBalance from "./BergBalance.astro";
import fallbackSprite from "@/assets/items/empty.png";

interface Props {
    itemName: string;
    hasAlready: boolean;
}

const { itemName, hasAlready } = Astro.props;

const item = items[itemName];

let source = "/src/assets/items/";

switch (item.type) {
    case EquippableType.EYES: {
        source += "eyes";
        break;
    }
    case EquippableType.FACE: {
        source += "face";
        break;
    }
    case EquippableType.HAIR: {
        source += "hair";
        break;
    }
    case EquippableType.SKIN: {
        source += "skin";
        break;
    }
    default: {
        source = "";
    }
}

let color: string;

switch (item.Rarity) {
    case Rarity.COMMON: {
        color = "gambling-item-common";
        break;
    }
    case Rarity.UNCOMMON: {
        color = "gambling-item-uncommon";
        break;
    }
    case Rarity.RARE: {
        color = "gambling-item-rare";
        break;
    }
    case Rarity.EPIC: {
        color = "gambling-item-epic";
        break;
    }
    case Rarity.LEGENDARY: {
        color = "gambling-item-legendary";
        break;
    }
}

let images: Record<string, () => Promise<{ default: ImageMetadata }>>;

if (source) {
    images = import.meta.glob<{ default: ImageMetadata }>(
        "/src/assets/items/**.png"
    );
}

const image = images![`${source}/${item.resourceName}.png`];

const itemImage = image ? (await image()).default : fallbackSprite;
---

<div class=`absolute w-full h-full left-0 top-0 ${color}` id="gambling-item-bg">
    <span id="item-reveal">
        <Image
            src={itemImage}
            class="w-full h-full object-contain"
            alt="Item"
        />
    </span>
    <div id="show-after-reveal" class="w-full h-full fixed left-0 top-0">
        <span>
            <div class="absolute w-1/2 aspect-square z-[1]"></div>
            <Image
                src={itemImage}
                class="w-full h-full object-contain m-auto z-[2]"
                alt="Item"
            />
            <div class="fixed bottom-0 p-2 max-h-[20%] w-full">
                <div
                    class="rounded-lg bg-background p-2 text-[1.4em] leading-6"
                >
                    <h2 class="text-[1.5em]">{item.name}</h2>
                    <p>{item.description}</p>
                    {
                        hasAlready && (
                            <div>
                                Da du dieses Item bereits besitzt, hast du
                                stattdessen{" "}
                                <span class="text-[0.4em] mr-1">
                                    <BergBalance
                                        amount={item.value}
                                        class="inline-block w-min"
                                    />{" "}
                                </span>
                                bekommen.
                            </div>
                        )
                    }
                </div>
            </div>
        </span>
    </div>
</div>

<style>
    @keyframes item-reveal {
        0% {
            transform: scale(0) rotate(0turn);
            opacity: 1;
        }

        99.99% {
            opacity: 1;
        }
        100% {
            transform: scale(1) rotate(10turn);
            opacity: 0;
        }
    }

    @keyframes show-after-reveal {
        0% {
            opacity: 0;
        }

        99.99% {
            opacity: 0;
        }

        100% {
            opacity: 1;
        }
    }

    @keyframes gambling-bg {
        0% {
            rotate: 0turn;
        }

        100% {
            rotate: 1turn;
        }
    }

    #gambling-item-bg {
        overflow: hidden;
        clip-path: border-box;
    }

    #gambling-item-bg::before {
        content: "";
        inset: -200%;
        z-index: -1;
        position: absolute;
        animation: 40s gambling-bg linear infinite;
    }

    .gambling-item-common::before {
        background-image: repeating-conic-gradient(
            hsl(0, 0%, 25%) 0%,
            hsl(0, 0%, 25%) 5%,
            hsl(0, 0%, 50%) 5%,
            hsl(0, 0%, 50%) 10%
        );
    }

    #item-reveal > * {
        /*cubic-bezier(0.895, 0.03, 0.685, 0.22)*/
        animation: item-reveal 8s ease-in-out;
        opacity: 0;
        filter: brightness(0);
    }

    #show-after-reveal > span {
        animation: show-after-reveal 8s ease-in-out;
        opacity: 1;
    }

    .gambling-item-uncommon::before {
        background-image: repeating-conic-gradient(
            hsl(117, 63%, 25%) 0%,
            hsl(117, 63%, 25%) 5%,
            hsl(117, 63%, 50%) 5%,
            hsl(117, 63%, 50%) 10%
        );
    }

    .gambling-item-rare::before {
        background-image: repeating-conic-gradient(
            hsl(48, 100%, 25%) 0%,
            hsl(48, 100%, 25%) 5%,
            hsl(48, 100%, 50%) 5%,
            hsl(48, 100%, 50%) 10%
        );
    }

    .gambling-item-epic::before {
        background-image: repeating-conic-gradient(
            hsl(300, 50%, 23%) 0%,
            hsl(300, 50%, 23%) 5%,
            hsl(300, 50%, 45%) 5%,
            hsl(300, 50%, 45%) 10%
        );
    }

    .gambling-item-legendary::before {
        background-image: repeating-conic-gradient(
            hsl(48, 97%, 24%) 0%,
            hsl(48, 97%, 24%) 5%,
            hsl(48, 97%, 48%) 5%,
            hsl(48, 97%, 48%) 10%
        );
    }
</style>

<script is:inline>
    const listener = (ev) => {
        ev.preventDefault();
        ev.stopPropagation();

        globalThis.stopAllSounds();

        document
            .querySelector("#gambling-item-bg")
            .removeEventListener("click", listener);
        // Skip animation
        document.querySelector("#item-reveal > *").style.animation = "none";
        document.querySelector("#item-reveal > *").style.opacity = 0;
        document.querySelector("#show-after-reveal > span").style.animation =
            "none";
        document.querySelector("#show-after-reveal > span").style.opacity =
            "1 !important";
    };
    document
        .querySelector("#gambling-item-bg")
        .addEventListener("click", listener);
</script>
